generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id                     String      @id @default(uuid())
  name                   String
  email                  String      @unique
  password               String
  phone                  String      @unique
  discipline             String
  educationalInstitution String
  experience             String      @db.VarChar(100)
  classrooms             Classroom[]
  students               Student[]   @relation("TeacherStudents")
  activities             Activity[]
  conversations          Conversation[]
  createdAt              DateTime    @default(now())
}

model Classroom {
  id         String             @id @default(uuid())
  name       String
  teacher    Teacher            @relation(fields: [teacherId], references: [id])
  teacherId  String
  students   StudentClassroom[]
  activities Activity[]
  createdAt  DateTime           @default(now())
}

model Student {
  id          String               @id @default(uuid())
  name        String
  email       String               @unique
  password    String
  teacher     Teacher              @relation("TeacherStudents", fields: [teacherId], references: [id])
  teacherId   String
  classrooms  StudentClassroom[]
  submissions ActivitySubmission[]
  conversations Conversation[]
  createdAt   DateTime             @default(now())
}

model StudentClassroom {
  id          String    @id @default(uuid())
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
}

model Activity {
  id          String               @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  type        ActivityType
  classroomId String
  classroom   Classroom            @relation(fields: [classroomId], references: [id])
  teacherId   String
  teacher     Teacher              @relation(fields: [teacherId], references: [id])
  fileUrl     String?
  createdAt   DateTime             @default(now())
  submissions ActivitySubmission[]
}

model ActivitySubmission {
  id          String           @id @default(uuid())
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  activity    Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId  String
  submittedAt DateTime?
  fileUrl     String?
  content     String?
  grade       Float?
  status      SubmissionStatus @default(PENDING)
}

model Conversation {
  id          String   @id @default(uuid())
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  messages    Message[]
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())

  senderRole     Role       
  senderId       String

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum ActivityType {
  ASSIGNMENT
  EXERCISE
  COMPLEMENTARY_MATERIAL
}


enum SubmissionStatus {
  PENDING
  COMPLETED
}

enum Role {
  TEACHER
  STUDENT
}
